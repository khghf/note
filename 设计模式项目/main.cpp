#include<iostream>
#include"创建型模式/FactoryMethod.hpp"//工厂方法模式
#include"创建型模式/AbstractFactory.hpp"//抽象工厂模式
#include"创建型模式/Builder.hpp"//生成器模式
#include"创建型模式/Prototype.hpp"//原型模式
#include"创建型模式/Singleton.hpp"//单例模式

#include"结构型模式/Adapter.hpp"//适配器模式
#include"结构型模式/Bridge.hpp"//桥接模式
#include"结构型模式/Composite.hpp"//组合模式
#include"结构型模式/Decorator.hpp"//装饰模式
#include"结构型模式/Facade.hpp"//装饰模式
#include"结构型模式/Flyweight.hpp"//享元模式
#include"结构型模式/Proxy.hpp"//代理模式

#include"行为模式/ChainofResponsibility.hpp"//责任链模式
#include"行为模式/Command.hpp"//责任链模式
#include"行为模式/Iterator.hpp"//迭代器模式
#include"行为模式/Memento.hpp"//备忘录模式
#include"行为模式/Observer.hpp"//观察者模式
#include"行为模式/State.hpp"//状态模式
#include"行为模式/Strategy.hpp"//策略模式
#include"行为模式/TemplateMethod.hpp"//模板方法模式
#include"行为模式/Visitor.hpp"//访问者模式
using namespace std;
int main()
{
	//******************************创建型设计模式******************************//
	//工厂方法模式
	//FactoryMethod_test();
	// 
	//抽象工厂模式
	//AbstractFactory_test();
	// 
	//生成器模式
	//Builder_test();
	//
	//原型模式
	//Prototype_test();
	//
	//单例模式
	//Singleton_test();
	// 
	//******************************结构型设计模式******************************//
	// 适配器模式
	//Adapter_test();
	// 
	// 桥接模式
	//Bridge_test();
	// 
	// 组合模式
	//Composite_test();
	// 
	// 装饰模式
	//Decorator::Decorator_test();
	// 
	// 外观模式
	//Facade_test();
	// 
	// 享元模式
	//Flyweight_test();
	// 
	// 代理模式
	//Proxy::Proxy_test();
	// 
	//******************************行为设计模式******************************//
	// 责任链模式
	//ChainofResponsibility_test();
	// 
	// 命令模式
	//Command_test();
	// 
	// 迭代器模式
	//Iterator_test();
	// 
	// 备忘录模式
	//Memento_test();
	// 
	//观察者模式
	//ObserverModle_test();
	//
	//状态模式
	//State_test();
	//
	//策略模式
	//Strategy::Strategy_test();
	//
	//模板方法模式
	//TemplateMethod_test();
	//
	//访问者模式
	//Visitor::Visitor_test();
}
